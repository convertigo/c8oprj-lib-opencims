accessibility: Hidden
comment: |
  'Gets a file from CMIS repository. The file will be retrieved and saved in a temp directory. When you finish using this file you should delete it. The sequence will return the full path of the output file.
  
  Use docPath variable to search a document by its Path.
  Or
  Use docID variable to search a document by its Id.
  Do not fill both variables or you will have an error.
  
  ### Output
  ```
  {
    "result": [{
      "filePath": "C:\\Users\\grego\\AppData\\Local\\Temp\\C8oCMIS_11422265988976522516_camera4.gif",
      "id": "2f9c8608-c2ca-435a-9c86-08c2ca235ab1;1.0",
      "name": "camera4.gif",
      "creator": "admin",
      "creationDate": "2025-06-04T16:33:17Z",
      "fileSize": 22982,
      "mimeType": "image/gif",
      "properties": [
        {
          "id": "alfcmis:nodeRef",
          "name": "Alfresco Node Ref",
          "value": "workspace://SpacesStore/2f9c8608-c2ca-435a-9c86-08c2ca235ab1"
        },
        {
          "id": "cmis:isImmutable",
          "name": "Is Immutable",
          "value": false
        },
        ...
      ]
    }]
  }
  ```'
↓GetFile [steps.SimpleStep-1744458011199]: 
  expression: |
    'var cmis = new JavaImporter(
        org.apache.chemistry.opencmis.client.api,
        org.apache.chemistry.opencmis.client.runtime,
        org.apache.chemistry.opencmis.commons.enums,
        org.apache.chemistry.opencmis.commons,
        java.util,
        java.io
    );
    
    var error = null;
    var res = [];
    
    with (cmis) {
    	try {
    		
    		// get CMISSession
    		var session = context.httpSession.getAttribute("CMISSession");
    		
    		if (session == null) {
    			throw new Error("Session not found. Please connect first.");
    		}
    		
    	    // Get document by path or ID
    	    if(docID != null && docID != "" && docPath != null && docPath != ""){
    			throw new Error("You must set docID or docPath value. Not both!");
    		}
    	    var doc = (docID != null && docID != "") ? session.getObject(session.createObjectId(docID)) : session.getObjectByPath(docPath);
    	    if(!(doc instanceof Document)){
    			throw new Error("Document not found.");
    		}
    	    log.debug("Found document: " + doc.getName());
    	
    	    // Get the content stream
    	    var contentStream = doc.getContentStream();
    	    var inputStream = contentStream.getStream();
    	
    		// Create temp file (prefix, suffix)
    		var tempFile = File.createTempFile("C8oCMIS_", "_" + doc.getName());
    		var fileOut = new FileOutputStream(tempFile);
    	
    	    // Buffer to read/write
    	    var buffer = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 10*1024);
    	    var bytesRead = 0;
    	
    	    while ((bytesRead = inputStream.read(buffer)) !== -1) {
    	        fileOut.write(buffer, 0, bytesRead);
    	    }
    	
    	    // Close streams
    	    inputStream.close();
    	    fileOut.close();
    	
    		outputPath = tempFile.getAbsolutePath();
    		log.debug("File saved to: " + outputPath);
    		
    		var res_doc = {
    			"filePath": outputPath,
    			"id": doc.getId(),
    			"name": doc.getName(),
    			"creator": doc.getCreatedBy(),
    			"creationDate": formatReadableDate(doc.getCreationDate()),
    			"fileSize": doc.getContentStreamLength(),
    			"mimeType": doc.getContentStreamMimeType()
    		};
    		
    		// Get document properties
    		if (doc.getProperties() == null) {
    		    throw new Error("Properties not found.");
    		}
    		
    		var res_props = [];
    		doc.getProperties().forEach(function(prop) {
    		    var value = convertValue(prop.getValue());
    		    res_props.push({"id": prop.getId(), "name": prop.getDisplayName(), "value": value});
    		});
    		
    		res_doc["properties"] = res_props;
    		
    		// Get document secondary types as as separated key
    		var secondaryTypes = doc.getPropertyValue("cmis:secondaryObjectTypeIds");
    		res_doc["secondaryObjectTypeIds"] = secondaryTypes;
    		
    		res.push(res_doc);
    		log.debug("File downloaded: " + JSON.stringify(res));
    	} catch (e) {
    		// Handle exceptions
    		error = e.message;
    		log.error("Error: " + error);
    		if (e.cause) {
    			log.error("Cause: " + e.cause.message);
    		}
    	}
    }
    
    // Fonction utilitaire pour formater une date ISO 8601
    function formatReadableDate(calendar) {
        if (calendar == null || calendar == "null") {
            return null; // Pas de date
        }
        var formatter = new java.text.SimpleDateFormat("yyyy-MM-dd''T''HH:mm:ss''Z''");
        formatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); // Assure un format en UTC
        return formatter.format(calendar.getTime());
    }
    
    function convertValue(value) {
        if (value instanceof java.math.BigInteger) {
            return value.toString(); // Conversion en String
        } else if (value instanceof java.util.GregorianCalendar) {
            return formatReadableDate(value.getTime()); // Conversion Date → ISO 8601
        }
        return value; // Retourne la valeur originale
    }
    '
↓jIf [steps.IfStep-1744458011202]: 
  condition: error != null
  ↓Error_structure [steps.XMLErrorStep-1744458011205]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: JS
          - →→: error
  ↓Return [steps.ReturnStep-1744458011208]: 
↓object [steps.JsonToXmlStep-1749113762366]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: result
↓docPath [variables.RequestableVariable-1744458011217]: 
  comment: CMIS Path of the file to retrieve. For example '/MyFolder/Myfile.doc'
↓docID [variables.RequestableVariable-1749054687911]: 
  comment: CMIS ID of the file to retrieve. For example '30d4ef19-c3c2-4611-94ef-19c3c2e6114e'
↓TestKO [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1744461263910]: 
    value: /MyFolder/FAKE.DOC
↓TestKO1 [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749223501118]: 
    value: /MyFolder/FAKE.DOC
  ↓docID [variables.TestCaseVariable-1749223509188]: 
    value: 123456789
↓TestOK_id [core.TestCase]: 
  ↓docID [variables.TestCaseVariable-1749112868351]: 
    value: 3fef83e9-a1ea-4cc7-af83-e9a1ea1cc7e2
↓TestOK_path [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1744458375381]: 
    value: /Shared/myFile.pdf