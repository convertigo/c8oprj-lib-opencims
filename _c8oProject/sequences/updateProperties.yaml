accessibility: Hidden
comment: |
  'Updates file properties in a CMIS repository.
  
  Use docPath variable to search a document by its Path.
  Or
  Use docID variable to search a document by its Id.
  Do not fill both variables or you will have an error.
  
  You can pudate document properties using the properties variable.
  Set an array of objects with name/value key value pairs.
  For example:
  [{"name": "cmis:description", "value": "sample PDF file created by GV"}]
  
  ### Output
  ```
  {
    "result": [{
      "filePath": "/Shared/myFile.pdf",
      "id": "1e1d7d10-a8cd-4e8f-9d7d-10a8cd2e8f10;1.0",
      "name": "myFile.pdf",
      "creator": "admin",
      "creationDate": "2025-06-06T15:37:05Z",
      "fileSize": 19475,
      "mimeType": "application/pdf",
      "properties": [
          {
            "id": "alfcmis:nodeRef",
            "name": "Alfresco Node Ref",
            "value": "workspace://SpacesStore/2f60771b-92bc-4ac4-a077-1b92bc5ac4b4"
          },
          ...
    }, ...]
  }
  ```
  '
↓updateProps [steps.SimpleStep-1749746644112]: 
  expression: |
    'var cmis = new JavaImporter(
        org.apache.chemistry.opencmis.client.api,
        org.apache.chemistry.opencmis.client.runtime,
        org.apache.chemistry.opencmis.commons.enums,
        org.apache.chemistry.opencmis.commons,
        java.util,
        java.io
    );
    
    var error = null;
    var res = [];
    
    with (cmis) {
    	try {
    		
    		// get CMISSession
    		var session = context.httpSession.getAttribute("CMISSession");
    		
    		if (session == null) {
    			throw new Error("Session not found. Please connect first.");
    		}
    		
    	    // Get document by path or ID
    	    if(docID != null && docID != "" && docPath != null && docPath != ""){
    			throw new Error("You must set docID or docPath value. Not both!");
    		}
    	    var doc = (docID != null && docID != "") ? session.getObject(session.createObjectId(docID)) : session.getObjectByPath(docPath);
    	    if(!(doc instanceof Document)){
    			throw new Error("Document not found.");
    		}
    	    log.debug("Found document: " + doc.getName());
    		
    		// Document properties
    	    var props = new HashMap();
    	    
    	    // Adding properties objects
    	    if(properties != null && properties != ""){
    			var props_res = JSON.parse(properties);
    			props_res.forEach(function(obj){
    				if(!("name" in obj)){
    					throw new Error("Property must defined a ''name'' key.");
    				} else {
    					if (!("value" in obj)) {
    			            obj.value = null;
    			        }
    			        log.debug("Update property ''" + obj.name + "'' with value ''" + obj.value + "''");
    			    	props.put(obj.name, obj.value);
    				}
    			});
    		}
    		
    		// Adding Secondary Types
    		if(secondaries != null && secondaries != ""){
    			var sec_res = JSON.parse(secondaries);
    			var secondaryTypes = new ArrayList();
    			sec_res.forEach(function(type){
    				secondaryTypes.add(type);
    				log.debug("Updating aspect ''" + type + "''");
    			});
    			props.put("cmis:secondaryObjectTypeIds", secondaryTypes);
    		}
    		
    		// Update Document properties
    		doc.updateProperties(props);
    	    		
    		var res_doc = {
    			"filePath": doc.getPaths().toArray()[0],
    			"id": doc.getId(),
    			"name": doc.getName(),
    			"creator": doc.getCreatedBy(),
    			"creationDate": formatReadableDate(doc.getCreationDate()),
    			"fileSize": doc.getContentStreamLength(),
    			"mimeType": doc.getContentStreamMimeType()
    		};
    		
    		var res_props = [];
    		doc.getProperties().forEach(function(prop) {
    		    var value = convertValue(prop.getValue());
    		    res_props.push({"id": prop.getId(), "name": prop.getDisplayName(), "value": value});
    		});
    		
    		res_doc["properties"] = res_props;
    		res.push(res_doc);
    		log.debug("File Properties updated: " + JSON.stringify(res));
    	} catch (e) {
    		// Handle exceptions
    		error = e.message;
    		log.error("Error: " + error);
    		if (e.cause) {
    			log.error("Cause: " + e.cause.message);
    		}
    	}
    }
    
    // Fonction utilitaire pour formater une date ISO 8601
    function formatReadableDate(calendar) {
        if (calendar == null || calendar == "null") {
            return null; // Pas de date
        }
        var formatter = new java.text.SimpleDateFormat("yyyy-MM-dd''T''HH:mm:ss''Z''");
        formatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); // Assure un format en UTC
        return formatter.format(calendar.getTime());
    }
    
    function convertValue(value) {
        if (value instanceof java.math.BigInteger) {
            return value.toString(); // Conversion en String
        } else if (value instanceof java.util.GregorianCalendar) {
            return formatReadableDate(value.getTime()); // Conversion Date → ISO 8601
        }
        return value; // Retourne la valeur originale
    }
    '
↓jIf [steps.IfStep-1749746489460]: 
  condition: error != null
  ↓Error_structure [steps.XMLErrorStep-1749746489463]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: JS
          - →→: error
  ↓Return [steps.ReturnStep-1749746489466]: 
↓object [steps.JsonToXmlStep-1749746489469]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: result
↓docPath [variables.RequestableVariable-1749746559513]: 
  comment: CMIS Path of the file whose properties are to be updated. For example '/MyFolder/Myfile.doc'
↓docID [variables.RequestableVariable-1749746559516]: 
  comment: CMIS Id of the file whose properties are to be updated. For example '30d4ef19-c3c2-4611-94ef-19c3c2e6114e'
↓properties [variables.RequestableVariable-1749746946991]: 
  comment: |
    '(Optional) Properties array for the file. Each entry is a JSON object with the properties to update for the file.
    
    [
    	{
    		name: property_name,
    		value: property_value
    	}
    ]'
↓secondaries [variables.RequestableVariable-1749746952702]: 
  comment: (Optional) Secondary Types array for the files. JSON array with the aspects to add for the file.
↓Test_Case [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749750177359]: 
    value: /Shared/New_My_File.pdf
  ↓docID [variables.TestCaseVariable-1749750177361]: 
  ↓properties [variables.TestCaseVariable-1749750177363]: 
    value: '[{"name": "cmis:name", "value": "New My File.pdf"}, {"name": "cmis:description", "value": "Updated Properties by GV"}]'
  ↓secondaries [variables.TestCaseVariable-1749750177365]: 