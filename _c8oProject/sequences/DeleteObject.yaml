accessibility: Hidden
comment: |
  '### Deletes a file or a folder from a CMIS repository.
  
  Use docPath variable to search a document by its Path.
  Or
  Use docID variable to search a document by its Id.
  Do not fill both variables or you will have an error.
  
  #### Output
  ```
  {
    "result": [{
      "id": "2f9c8608-c2ca-435a-9c86-08c2ca235ab1;1.0",
      "name": "camera4.gif",
      "creator": "admin",
      "creationDate": "2025-06-04T16:33:17Z",
      "fileSize": 22982,
      "mimeType": "image/gif",
      "properties": [
        {
          "id": "alfcmis:nodeRef",
          "name": "Alfresco Node Ref",
          "value": "workspace://SpacesStore/2f9c8608-c2ca-435a-9c86-08c2ca235ab1"
        },
        {
          "id": "cmis:isImmutable",
          "name": "Is Immutable",
          "value": false
        },
        ...
      ]
    }]
  }
  ```'
↓Delete [steps.SimpleStep-1749546223373]: 
  expression: |
    'include(''js/utils.js'');
    
    // Import required Java classes using JavaImporter
    var cmis = new JavaImporter(
        org.apache.chemistry.opencmis.client.api,
        org.apache.chemistry.opencmis.client.runtime,
        org.apache.chemistry.opencmis.commons.enums,
        org.apache.chemistry.opencmis.commons,
        java.util,
        java.io
    );
    
    var error = null;
    var res = [];
    
    with (cmis) {
    	try {
    		
    		// get CMISSession
    		var session = context.httpSession.getAttribute("CMISSession");
    		
    		if (session == null) {
    			throw new Error("Session not found. Please connect first.");
    		}
    		
    	    // Get document by path or ID
    	    if(docID != null && docID != "" && docPath != null && docPath != ""){
    			throw new Error("You must set docID or docPath value. Not both!");
    		}
    	    var doc = (docID != null && docID != "") ? session.getObject(session.createObjectId(docID)) : session.getObjectByPath(docPath);
    	    
    	    log.debug("IsDocument? " + (doc instanceof Document));
    	    log.debug("IsFolder? " + (doc instanceof Folder));
    	    log.debug("Found document: " + doc.getName());
    	    
    		if(doc instanceof Document){
    			var res_doc = {
    				"id": doc.getId(),
    				"name": doc.getName(),
    				"creator": doc.getCreatedBy(),
    				"creationDate": formatReadableDate(doc.getCreationDate()),
    				"fileSize": doc.getContentStreamLength(),
    				"mimeType": doc.getContentStreamMimeType()
    			};
    			
    			res_doc["properties"] = getProperties(doc);
    			res.push(res_doc);
    						
    			doc.delete(allVersions != null && allVersions != "" ? allVersions.toLowerCase() == "true" : true);
    			log.debug("File deleted: " + JSON.stringify(res));
    		} else if(doc instanceof Folder){
    			var res_doc = {
    				"id": doc.getId(),
    				"name": doc.getName(),
    				"description": doc.getDescription(),
    				"isRootFolder": doc.isRootFolder(),
    				"creator": doc.getCreatedBy(),
    				"creationDate": formatReadableDate(doc.getCreationDate())
    			};
    			
    			res_doc["properties"] = getProperties(doc);
    			res.push(res_doc);
    			
    			doc.deleteTree(allVersions != null && allVersions != "" ? allVersions.toLowerCase() == "true" : true, UnfileObject.DELETE, true);
    		} else {
    			throw new Error("Document not found.");
    		}
    
    	} catch (e) {
    		// Handle exceptions
    		log.error("Error: " + e.message);
    		error = e.message;
    		if (e.cause) {
    			log.error("Cause: " + e.cause.message);
    		}
    	}
    }
    '
↓jIf [steps.IfStep-1749546223376]: 
  condition: error != null
  ↓Error_structure [steps.XMLErrorStep-1749546223379]: 
    message: 
      - xmlizable: 
        - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - ↑mode: JS
          - →→: error
  ↓Return [steps.ReturnStep-1749546223382]: 
↓object [steps.JsonToXmlStep-1749546223385]: 
  jsonObject: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: JS
        - →→: res
  key: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - ↑mode: PLAIN
        - →→: result
↓docPath [variables.RequestableVariable-1749546223388]: 
  comment: CMIS Path of the file to delete. For example '/MyFolder/Myfile.doc'
↓docID [variables.RequestableVariable-1749546223391]: 
  comment: CMIS ID of the file to delete. For example '30d4ef19-c3c2-4611-94ef-19c3c2e6114e'
↓allVersions [variables.RequestableVariable-1749546870549]: 
  comment: |
    'If true, deletes all the document versions.<br/>
    If false, deletes only the last version or only the provided version with the docID like: ''5d47bb40-e241-4fe7-87bb-40e2416fe76a;1.0'''
  value: true
↓TestKO [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749546223395]: 
    value: /MyFolder/FAKE.DOC
↓TestKO1 [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749546223399]: 
    value: /MyFolder/FAKE.DOC
  ↓docID [variables.TestCaseVariable-1749546223402]: 
    value: 123456789
↓TestOK_id [core.TestCase]: 
  ↓docID [variables.TestCaseVariable-1749546223406]: 
    value: 57ffb410-6eab-498a-bfb4-106eab198a76
↓TestOK_path [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749546223410]: 
    value: /Shared/myFile.pdf
↓TestOK_path1 [core.TestCase]: 
  ↓docPath [variables.TestCaseVariable-1749804622430]: 
    value: /TEMP