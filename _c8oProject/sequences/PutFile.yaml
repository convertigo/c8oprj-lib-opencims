accessibility: Hidden
comment: |
  Puts a file in a CMIS repository. The Sequence will return the folder were the file has been placed.
  
â†“PutFile [steps.SimpleStep-1744461342356]: 
  expression: |
    'var cmis = new JavaImporter(
        org.apache.chemistry.opencmis.client.api,
        org.apache.chemistry.opencmis.client.runtime,
        org.apache.chemistry.opencmis.commons.enums,
        org.apache.chemistry.opencmis.commons,
        java.util,
        java.io
    );
    
    var error = null
    var res = [];
    
    with (cmis) {
    	try {
    		// get CMISSession
    		var session = context.httpSession.getAttribute("CMISSession");
            if (session == null) {
    			throw new Error("Session not found. Please connect first.");
    		}
    	    var folder = (folderID != null && folderID != "") ? session.getObject(session.createObjectId(folderID)) : session.getObjectByPath(folderPath);
    	    log.debug("Uploading to: " + folder.getPaths().toArray()[0]);
    	
    		// for each filePaths[] loop and upload
    		for (var i = 0; i < filePaths.length; i++) {	
    		    // Local file to upload
    		    var file = new File(get_full_path(filePaths[i]));
    		
    		    var fileName = (fileNames != null && fileNames[i] != "") ? fileNames[i] : file.getName();
    		    var fileInputStream = new FileInputStream(file);
    		    var fileLength = file.length();
    		
    			// ðŸ§  3. Try to detect MIME type
    			var mimeType = java.nio.file.Files.probeContentType(file.toPath());
    			if (mimeType == null) {
    			     mimeType = "application/octet-stream"; // fallback
    			}
    			log.debug("ðŸ§ª Detected MIME type: " + mimeType);
    			
    		    // Create CMIS content stream
    		    var contentStream = session.getObjectFactory().createContentStream(
    		        fileName,
    		        fileLength,
    		        mimeType, 
    		        fileInputStream
    		    );
    		
    		    // Document properties
    		    var props = new HashMap();
    		    props.put(PropertyIds.OBJECT_TYPE_ID, "cmis:document");
    		    props.put(PropertyIds.NAME, fileName);
    		
    		    // Upload file (create document in the folder)
    		    var newDoc = folder.createDocument(props, contentStream, VersioningState.MAJOR);
    		    log.debug("âœ… File uploaded: " + newDoc.getName());
    		    log.debug("CMIS path: " + newDoc.getPaths().toArray()[0]);
    			
    			res.push({
    				"filePath": newDoc.getPaths().toArray()[0],
    				"id": newDoc.getId(),
    				"name": newDoc.getName(),
    				"creator": newDoc.getCreatedBy(),
    				"creationDate": formatReadableDate(newDoc.getCreationDate()),
    				"fileSize": newDoc.getContentStreamLength(),
    				"mimeType": mimeType
    			});
    		    // Clean up
    		    fileInputStream.close();
    			contentStream.getStream().close();
    		}
    		log.debug("Files uploaded: " + JSON.stringify(res));
    	} catch (e) {
    		// Handle exceptions
    		error = e.message;
    		if (e.cause) {
    			log.error("Cause: " + e.cause.message);
    		}
    	}
    }
    
    function get_full_path(file_path){
    	if(file_path != ""){
    		project_directory_path = context.getProjectDirectory().replace("\\", "/") + "/";
     		if(file_path.indexOf(".//") != -1){
      			file_path = project_directory_path + file_path.substring(3);
    		}
     		else if(file_path.indexOf("./") != -1){
      			file_path = project_directory_path + "../" + file_path.substring(3);
    		}
    	}
    	return file_path;
    }
    
    // Fonction utilitaire pour formater une date lisible
    function formatReadableDate(calendar) {
        if (calendar == null || calendar == "null") {
            return null; // Pas de date
        }
        var formatter = new java.text.SimpleDateFormat("yyyy-MM-dd''T''HH:mm:ss''Z''");
        formatter.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); // Assure un format en UTC
        return formatter.format(calendar.getTime());
    }'
â†“jIf [steps.IfStep-1744461342359]: 
  condition: error != null
  â†“Error_structure [steps.XMLErrorStep-1744461342362]: 
    message: 
      - xmlizable: 
        - â†‘classname: com.twinsoft.convertigo.beans.steps.SmartType
        - SmartType: 
          - â†‘mode: JS
          - â†’â†’: error
  â†“Return [steps.ReturnStep-1744461342365]: 
â†“object [steps.JsonToXmlStep-1744530956568]: 
  jsonObject: 
    - xmlizable: 
      - â†‘classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - â†‘mode: JS
        - â†’â†’: res
  key: 
    - xmlizable: 
      - â†‘classname: com.twinsoft.convertigo.beans.steps.SmartType
      - SmartType: 
        - â†‘mode: PLAIN
        - â†’â†’: result
â†“folderPath [variables.RequestableVariable-1744461342371]: 
  comment: Target path in the CMIS. for example '/MyFolder'
â†“folderID [variables.RequestableVariable-1749050135618]: 
  comment: Target path in the CMIS. for example '/MyFolder'
â†“filePaths [variables.RequestableMultiValuedVariable-1744531147985]: 
  comment: Full Paths of the files to upload to CMIS. 
  isFileUpload: true
â†“fileNames [variables.RequestableMultiValuedVariable-1749042782705]: 
  comment: Full Paths of the files to upload to CMIS. 
  isFileUpload: true
â†“TestOK [core.TestCase]: 
  â†“folderPath [variables.TestCaseVariable-1744461817295]: 
    value: /Shared
  â†“filePaths [variables.TestCaseMultiValuedVariable-1744532244203]: 
    value: 
      - xmlizable: 
        - â†‘classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - â†‘value: .//sample_upload_file.pdf
  â†“fileNames [variables.TestCaseMultiValuedVariable-1749044164757]: 
    value: 
      - xmlizable: 
        - â†‘classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - â†‘value: myFile.pdf
â†“TestOK_folderID [core.TestCase]: 
  â†“folderPath [variables.TestCaseVariable-1749052525226]: 
  â†“filePaths [variables.TestCaseMultiValuedVariable-1749052525229]: 
    value: 
      - xmlizable: 
        - â†‘classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - â†‘value: .//sample_upload_file.pdf
  â†“fileNames [variables.TestCaseMultiValuedVariable-1749052525232]: 
    value: 
      - xmlizable: 
        - â†‘classname: com.twinsoft.convertigo.beans.common.XMLVector
        - com.twinsoft.convertigo.beans.common.XMLVector: 
          - java.lang.String: 
            - â†‘value: myFile.pdf
  â†“folderID [variables.TestCaseVariable-1749052537222]: 
    value: 16cfc56d-eb6c-4420-8fc5-6deb6c0420c5